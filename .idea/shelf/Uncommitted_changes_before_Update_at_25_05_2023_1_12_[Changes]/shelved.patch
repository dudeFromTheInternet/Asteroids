Index: models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame.time\r\nimport time\r\nfrom pygame.math import Vector2\r\nfrom pygame.transform import rotozoom\r\n\r\nfrom utils import get_random_velocity, load_sprite, wrap_position\r\n\r\n\r\nclass GameObject:\r\n    def __init__(self, position, sprite, velocity):\r\n        self.position = Vector2(position)\r\n        self.sprite = sprite\r\n        self.radius = sprite.get_width() / 2\r\n        self.velocity = Vector2(velocity)\r\n\r\n    def draw(self, surface):\r\n        blit_position = self.position - Vector2(self.radius)\r\n        surface.blit(self.sprite, blit_position)\r\n\r\n    def move(self, surface):\r\n        self.position = wrap_position(self.position + self.velocity, surface)\r\n\r\n    def collides_with(self, other_obj):\r\n        distance = self.position.distance_to(other_obj.position)\r\n        return distance < self.radius + other_obj.radius\r\n\r\n\r\nclass Spaceship(GameObject):\r\n    MANEUVERABILITY = 3\r\n    ACCELERATION = 0.25\r\n    BULLET_SPEED = 3\r\n\r\n    def __init__(self, position, create_bullet_callback):\r\n        self.score = 0\r\n        self.lives = 3\r\n        self.create_bullet_callback = create_bullet_callback\r\n\r\n        self.direction = Vector2(0, -1)\r\n        super().__init__(position, load_sprite(\"spaceship\"), Vector2(0))\r\n\r\n    def add_score(self, score_value):\r\n        self.score += score_value\r\n\r\n    def rotate(self, clockwise=True):\r\n        sign = 1 if clockwise else -1\r\n        angle = self.MANEUVERABILITY * sign\r\n        self.direction.rotate_ip(angle)\r\n\r\n    def draw(self, surface):\r\n        angle = self.direction.angle_to(Vector2(0, -1))\r\n        rotated_surface = rotozoom(self.sprite, angle, 1.0)\r\n        rotated_surface_size = Vector2(rotated_surface.get_size())\r\n        blit_position = self.position - rotated_surface_size * 0.5\r\n        surface.blit(rotated_surface, blit_position)\r\n\r\n    def accelerate(self):\r\n        self.velocity += self.direction * self.ACCELERATION\r\n\r\n    def not_accelerate(self):\r\n        if self.velocity != Vector2(0, 0) or self.velocity[0] < 0 or \\\r\n                self.velocity[1] < 0:\r\n            self.velocity -= self.direction * self.ACCELERATION\r\n            if self.velocity[0] < 0 or self.velocity[1] < 0:\r\n                self.velocity = Vector2(0, 0)\r\n\r\n    def shoot(self):\r\n        bullet_velocity = self.direction * self.BULLET_SPEED + self.velocity\r\n        bullet = Bullet(self.position, bullet_velocity)\r\n        self.create_bullet_callback(bullet)\r\n\r\n\r\nclass Asteroid(GameObject):\r\n    def __init__(self, position, create_asteroid_callback, size=3):\r\n        self.create_asteroid_callback = create_asteroid_callback\r\n        self.size = size\r\n\r\n        size_to_scale = {\r\n            3: 1,\r\n            2: 0.5,\r\n            1: 0.25,\r\n        }\r\n        scale = size_to_scale[size]\r\n        sprite = rotozoom(load_sprite(\"asteroid\"), 0, scale)\r\n\r\n        super().__init__(\r\n            position, sprite, get_random_velocity(0.25, 1)\r\n        )\r\n\r\n    def split(self, spaceship, ):\r\n        if self.size == 3:\r\n            spaceship.score += 300\r\n        elif self.size == 2:\r\n            spaceship.score += 200\r\n        elif self.size == 1:\r\n            spaceship.score += 100\r\n        if self.size > 1:\r\n            for _ in range(2):\r\n                asteroid = Asteroid(\r\n                    self.position, self.create_asteroid_callback, self.size - 1\r\n                )\r\n                self.create_asteroid_callback(asteroid)\r\n\r\n\r\nclass Bullet(GameObject):\r\n    def __init__(self, position, velocity):\r\n        super().__init__(position, load_sprite(\"bullet\"), velocity)\r\n\r\n    def move(self, surface):\r\n        self.position = self.position + self.velocity\r\n\r\n\r\nclass Ufo(GameObject):\r\n    BULLET_SPEED = 1\r\n    BULLET_FREQUENCY = 25\r\n\r\n    def __init__(self, position, create_bullet_callback):\r\n        self.create_bullet_callback = create_bullet_callback\r\n        self.current_frame = 0\r\n        self.direction = Vector2(0, -1)\r\n\r\n        sprite = rotozoom(load_sprite(\"ufo\"), 0, 1)\r\n        super().__init__(position, sprite, get_random_velocity(1, 2))\r\n\r\n    def move(self, surface):\r\n        self.position = self.position + self.velocity\r\n        self.current_frame += 1\r\n\r\n\r\n    def shoot(self):\r\n        bullet_velocity = get_random_velocity(1, 2) * self.BULLET_SPEED + self.velocity\r\n        bullet = Bullet(self.position, bullet_velocity)\r\n        self.create_bullet_callback(bullet)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models.py b/models.py
--- a/models.py	(revision 425b4f21c0aaf4d073e275df28b19b8465493067)
+++ b/models.py	(date 1684959140457)
@@ -125,7 +125,6 @@
         self.position = self.position + self.velocity
         self.current_frame += 1
 
-
     def shoot(self):
         bullet_velocity = get_random_velocity(1, 2) * self.BULLET_SPEED + self.velocity
         bullet = Bullet(self.position, bullet_velocity)
